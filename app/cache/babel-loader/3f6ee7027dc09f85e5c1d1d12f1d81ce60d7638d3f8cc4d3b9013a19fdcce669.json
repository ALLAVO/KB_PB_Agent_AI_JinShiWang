{"ast":null,"code":"var _jsxFileName = \"/Users/hyungjuncho/Documents/SNU_BFA/KB_capstone/KB_PB_Agent_AI_JinShiWang/frontend/src/components/client_pipeline/ClientPipeline.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchAllClients } from '../../api/clients';\nimport ClientList from './ClientList';\nimport ClientDetail from './ClientDetail';\nimport './ClientPipeline.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClientPipeline = ({\n  year,\n  month,\n  weekStr,\n  period,\n  onSetReportTitle,\n  autoCustomerName,\n  autoCustomerTrigger,\n  onAutoCustomerDone\n}) => {\n  _s();\n  const [clients, setClients] = useState([]);\n  const [selectedClient, setSelectedClient] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [view, setView] = useState('list'); // 'list' | 'detail'\n\n  // 고객 목록 로드\n  const loadClients = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const clientsData = await fetchAllClients();\n      setClients(clientsData);\n    } catch (err) {\n      setError('고객 데이터를 불러오는데 실패했습니다: ' + err.message);\n      console.error('Client loading error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    loadClients();\n  }, []);\n\n  // 자동 고객 검색 처리\n  useEffect(() => {\n    if (autoCustomerTrigger && autoCustomerName) {\n      const matchedClient = clients.find(client => client.name.toLowerCase().includes(autoCustomerName.toLowerCase()));\n      if (matchedClient) {\n        handleClientSelect(matchedClient);\n        if (onAutoCustomerDone) {\n          onAutoCustomerDone();\n        }\n      }\n    }\n  }, [autoCustomerTrigger, autoCustomerName, clients, onAutoCustomerDone]);\n  const handleClientSelect = client => {\n    setSelectedClient(client);\n    setView('detail');\n    if (onSetReportTitle) {\n      onSetReportTitle(`${client.name}님 리포트`);\n    }\n  };\n  const handleBackToList = () => {\n    setView('list');\n    setSelectedClient(null);\n    if (onSetReportTitle) {\n      onSetReportTitle('고객 리포트');\n    }\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"client-pipeline-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uC624\\uB958\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"retry-btn\",\n        onClick: loadClients,\n        children: \"\\uB2E4\\uC2DC \\uC2DC\\uB3C4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"client-pipeline-container\",\n    children: view === 'list' ? /*#__PURE__*/_jsxDEV(ClientList, {\n      clients: clients,\n      onClientSelect: handleClientSelect,\n      year: year,\n      month: month,\n      weekStr: weekStr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ClientDetail, {\n      client: selectedClient,\n      onBack: handleBackToList,\n      year: year,\n      month: month,\n      weekStr: weekStr,\n      period: period // period prop 전달\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(ClientPipeline, \"IBOEe8dNdzH5SlTzJFC08ljRHTg=\");\n_c = ClientPipeline;\nexport default ClientPipeline;\nvar _c;\n$RefreshReg$(_c, \"ClientPipeline\");","map":{"version":3,"names":["React","useState","useEffect","fetchAllClients","ClientList","ClientDetail","jsxDEV","_jsxDEV","ClientPipeline","year","month","weekStr","period","onSetReportTitle","autoCustomerName","autoCustomerTrigger","onAutoCustomerDone","_s","clients","setClients","selectedClient","setSelectedClient","loading","setLoading","error","setError","view","setView","loadClients","clientsData","err","message","console","matchedClient","find","client","name","toLowerCase","includes","handleClientSelect","handleBackToList","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onClientSelect","onBack","_c","$RefreshReg$"],"sources":["/Users/hyungjuncho/Documents/SNU_BFA/KB_capstone/KB_PB_Agent_AI_JinShiWang/frontend/src/components/client_pipeline/ClientPipeline.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchAllClients } from '../../api/clients';\nimport ClientList from './ClientList';\nimport ClientDetail from './ClientDetail';\nimport './ClientPipeline.css';\n\nconst ClientPipeline = ({ year, month, weekStr, period, onSetReportTitle, autoCustomerName, autoCustomerTrigger, onAutoCustomerDone }) => {\n  const [clients, setClients] = useState([]);\n  const [selectedClient, setSelectedClient] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [view, setView] = useState('list'); // 'list' | 'detail'\n\n  // 고객 목록 로드\n  const loadClients = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const clientsData = await fetchAllClients();\n      setClients(clientsData);\n    } catch (err) {\n      setError('고객 데이터를 불러오는데 실패했습니다: ' + err.message);\n      console.error('Client loading error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadClients();\n  }, []);\n\n  // 자동 고객 검색 처리\n  useEffect(() => {\n    if (autoCustomerTrigger && autoCustomerName) {\n      const matchedClient = clients.find(client => \n        client.name.toLowerCase().includes(autoCustomerName.toLowerCase())\n      );\n      if (matchedClient) {\n        handleClientSelect(matchedClient);\n        if (onAutoCustomerDone) {\n          onAutoCustomerDone();\n        }\n      }\n    }\n  }, [autoCustomerTrigger, autoCustomerName, clients, onAutoCustomerDone]);\n\n  const handleClientSelect = (client) => {\n    setSelectedClient(client);\n    setView('detail');\n    if (onSetReportTitle) {\n      onSetReportTitle(`${client.name}님 리포트`);\n    }\n  };\n\n  const handleBackToList = () => {\n    setView('list');\n    setSelectedClient(null);\n    if (onSetReportTitle) {\n      onSetReportTitle('고객 리포트');\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"client-pipeline-error\">\n        <h3>오류가 발생했습니다</h3>\n        <p>{error}</p>\n        <button className=\"retry-btn\" onClick={loadClients}>\n          다시 시도\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"client-pipeline-container\">\n      {view === 'list' ? (\n        <ClientList \n          clients={clients}\n          onClientSelect={handleClientSelect}\n          year={year}\n          month={month}\n          weekStr={weekStr}\n        />\n      ) : (\n        <ClientDetail\n          client={selectedClient}\n          onBack={handleBackToList}\n          year={year}\n          month={month}\n          weekStr={weekStr}\n          period={period} // period prop 전달\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ClientPipeline;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}