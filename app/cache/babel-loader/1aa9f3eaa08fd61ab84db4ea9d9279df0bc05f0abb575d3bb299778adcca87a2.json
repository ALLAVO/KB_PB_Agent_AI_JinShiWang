{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000/api/v1';\n\n// 조합된 차트 데이터 가져오기 (주가, 이동평균, 거래량 조합)\nexport const fetchCombinedStockChart = async (symbol, startDate, endDate, chartTypes = ['price'], maPeriods = [5, 20, 60]) => {\n  try {\n    const chartTypesStr = chartTypes.join(',');\n    const maPeriodsStr = maPeriods.join(',');\n    const url = new URL(`${API_BASE_URL}/stock-chart/combined-chart`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n    url.searchParams.append('chart_types', chartTypesStr);\n    url.searchParams.append('ma_periods', maPeriodsStr);\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch combined stock chart data');\n    }\n  } catch (error) {\n    console.error('Error fetching combined stock chart:', error);\n    throw error;\n  }\n};\n\n// 주가 차트 요약 정보 가져오기\nexport const fetchStockChartSummary = async (symbol, startDate, endDate) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/stock-chart/summary`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch stock chart summary');\n    }\n  } catch (error) {\n    console.error('Error fetching stock chart summary:', error);\n    throw error;\n  }\n};\n\n// 상세 주식 정보 가져오기\nexport const fetchEnhancedStockInfo = async symbol => {\n  try {\n    const url = new URL(`${API_BASE_URL}/companies/${symbol}/enhanced-info`);\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch enhanced stock info');\n    }\n  } catch (error) {\n    console.error('Error fetching enhanced stock info:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchCombinedStockChart","symbol","startDate","endDate","chartTypes","maPeriods","chartTypesStr","join","maPeriodsStr","url","URL","searchParams","append","response","fetch","toString","method","headers","ok","Error","status","data","json","success","error","console","fetchStockChartSummary","fetchEnhancedStockInfo"],"sources":["/Users/hyungjuncho/Documents/SNU_BFA/KB_capstone/KB_PB_Agent_AI_JinShiWang/frontend/src/api/stockChart.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api/v1';\n\n// 조합된 차트 데이터 가져오기 (주가, 이동평균, 거래량 조합)\nexport const fetchCombinedStockChart = async (symbol, startDate, endDate, chartTypes = ['price'], maPeriods = [5, 20, 60]) => {\n  try {\n    const chartTypesStr = chartTypes.join(',');\n    const maPeriodsStr = maPeriods.join(',');\n    \n    const url = new URL(`${API_BASE_URL}/stock-chart/combined-chart`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n    url.searchParams.append('chart_types', chartTypesStr);\n    url.searchParams.append('ma_periods', maPeriodsStr);\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch combined stock chart data');\n    }\n  } catch (error) {\n    console.error('Error fetching combined stock chart:', error);\n    throw error;\n  }\n};\n\n// 주가 차트 요약 정보 가져오기\nexport const fetchStockChartSummary = async (symbol, startDate, endDate) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/stock-chart/summary`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch stock chart summary');\n    }\n  } catch (error) {\n    console.error('Error fetching stock chart summary:', error);\n    throw error;\n  }\n};\n\n// 상세 주식 정보 가져오기\nexport const fetchEnhancedStockInfo = async (symbol) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/companies/${symbol}/enhanced-info`);\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch enhanced stock info');\n    }\n  } catch (error) {\n    console.error('Error fetching enhanced stock info:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}