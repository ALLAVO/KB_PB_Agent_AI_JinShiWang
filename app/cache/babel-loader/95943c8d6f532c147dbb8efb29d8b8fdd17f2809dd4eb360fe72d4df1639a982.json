{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000/api/v1';\n\n// 수익률 비교 데이터 가져오기\nexport const fetchReturnComparison = async (symbol, startDate, endDate) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/return-analysis/comparison`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch return comparison data');\n    }\n  } catch (error) {\n    console.error('Error fetching return comparison:', error);\n    throw error;\n  }\n};\n\n// 수익률 분석 요약 가져오기\nexport const fetchReturnAnalysisSummary = async (symbol, startDate, endDate) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/return-analysis/summary`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch return analysis summary');\n    }\n  } catch (error) {\n    console.error('Error fetching return analysis summary:', error);\n    throw error;\n  }\n};\n\n// 수익률 분석 표 데이터 가져오기\nexport const fetchReturnAnalysisTable = async (symbol, startDate, endDate) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/return-analysis/table`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch return analysis table');\n    }\n  } catch (error) {\n    console.error('Error fetching return analysis table:', error);\n    throw error;\n  }\n};\n\n// 결합된 차트 데이터 가져오기\nexport const fetchCombinedReturnChart = async (symbol, startDate, endDate) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/return-analysis/combined-chart`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch combined return chart data');\n    }\n  } catch (error) {\n    console.error('Error fetching combined return chart:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchReturnComparison","symbol","startDate","endDate","url","URL","searchParams","append","response","fetch","toString","method","headers","ok","Error","status","data","json","success","error","console","fetchReturnAnalysisSummary","fetchReturnAnalysisTable","fetchCombinedReturnChart"],"sources":["/Users/hyungjuncho/Documents/SNU_BFA/KB_capstone/KB_PB_Agent_AI_JinShiWang/frontend/src/api/returnAnalysis.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api/v1';\n\n// 수익률 비교 데이터 가져오기\nexport const fetchReturnComparison = async (symbol, startDate, endDate) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/return-analysis/comparison`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch return comparison data');\n    }\n  } catch (error) {\n    console.error('Error fetching return comparison:', error);\n    throw error;\n  }\n};\n\n// 수익률 분석 요약 가져오기\nexport const fetchReturnAnalysisSummary = async (symbol, startDate, endDate) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/return-analysis/summary`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch return analysis summary');\n    }\n  } catch (error) {\n    console.error('Error fetching return analysis summary:', error);\n    throw error;\n  }\n};\n\n// 수익률 분석 표 데이터 가져오기\nexport const fetchReturnAnalysisTable = async (symbol, startDate, endDate) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/return-analysis/table`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch return analysis table');\n    }\n  } catch (error) {\n    console.error('Error fetching return analysis table:', error);\n    throw error;\n  }\n};\n\n// 결합된 차트 데이터 가져오기\nexport const fetchCombinedReturnChart = async (symbol, startDate, endDate) => {\n  try {\n    const url = new URL(`${API_BASE_URL}/return-analysis/combined-chart`);\n    url.searchParams.append('symbol', symbol);\n    url.searchParams.append('start_date', startDate);\n    url.searchParams.append('end_date', endDate);\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.success) {\n      return data.data;\n    } else {\n      throw new Error(data.error || 'Failed to fetch combined return chart data');\n    }\n  } catch (error) {\n    console.error('Error fetching combined return chart:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}