{"ast":null,"code":"// 주차 계산 유틸리티 (프론트엔드용)\nexport function getWeeksOfMonth(year, month) {\n  // month: 1~12\n  // \"해당 주의 토요일이 속한 달\"이 기준 달이면 포함\n  const weeks = [];\n  // 기준 달의 첫째날~마지막날\n  const firstDayOfMonth = new Date(year, month - 1, 1);\n  const lastDayOfMonth = new Date(year, month, 0);\n  // 기준 달의 첫 주 일요일 찾기 (이전달 포함)\n  let start = new Date(firstDayOfMonth);\n  start.setDate(start.getDate() - start.getDay()); // 그 주의 일요일로 이동\n  let week = 1;\n  while (true) {\n    const end = new Date(start);\n    end.setDate(end.getDate() + 6); // 토요일\n    // 토요일이 기준 달에 속하면 포함\n    if (end.getMonth() + 1 === month) {\n      weeks.push({\n        week,\n        start: new Date(start),\n        end: new Date(end)\n      });\n      week++;\n    }\n    // 기준 달의 마지막날이 토요일이거나, 토요일이 이미 기준 달을 넘으면 종료\n    if (end >= lastDayOfMonth) break;\n    start.setDate(start.getDate() + 7);\n  }\n  return weeks;\n}","map":{"version":3,"names":["getWeeksOfMonth","year","month","weeks","firstDayOfMonth","Date","lastDayOfMonth","start","setDate","getDate","getDay","week","end","getMonth","push"],"sources":["/Users/hyungjuncho/Documents/SNU_BFA/KB_capstone/KB_PB_Agent_AI_JinShiWang/frontend/src/weekUtils.js"],"sourcesContent":["// 주차 계산 유틸리티 (프론트엔드용)\nexport function getWeeksOfMonth(year, month) {\n  // month: 1~12\n  // \"해당 주의 토요일이 속한 달\"이 기준 달이면 포함\n  const weeks = [];\n  // 기준 달의 첫째날~마지막날\n  const firstDayOfMonth = new Date(year, month - 1, 1);\n  const lastDayOfMonth = new Date(year, month, 0);\n  // 기준 달의 첫 주 일요일 찾기 (이전달 포함)\n  let start = new Date(firstDayOfMonth);\n  start.setDate(start.getDate() - start.getDay()); // 그 주의 일요일로 이동\n  let week = 1;\n  while (true) {\n    const end = new Date(start);\n    end.setDate(end.getDate() + 6); // 토요일\n    // 토요일이 기준 달에 속하면 포함\n    if ((end.getMonth() + 1) === month) {\n      weeks.push({\n        week,\n        start: new Date(start),\n        end: new Date(end)\n      });\n      week++;\n    }\n    // 기준 달의 마지막날이 토요일이거나, 토요일이 이미 기준 달을 넘으면 종료\n    if (end >= lastDayOfMonth) break;\n    start.setDate(start.getDate() + 7);\n  }\n  return weeks;\n}\n"],"mappings":"AAAA;AACA,OAAO,SAASA,eAAeA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC3C;EACA;EACA,MAAMC,KAAK,GAAG,EAAE;EAChB;EACA,MAAMC,eAAe,GAAG,IAAIC,IAAI,CAACJ,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;EACpD,MAAMI,cAAc,GAAG,IAAID,IAAI,CAACJ,IAAI,EAAEC,KAAK,EAAE,CAAC,CAAC;EAC/C;EACA,IAAIK,KAAK,GAAG,IAAIF,IAAI,CAACD,eAAe,CAAC;EACrCG,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC,GAAGF,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,IAAIC,IAAI,GAAG,CAAC;EACZ,OAAO,IAAI,EAAE;IACX,MAAMC,GAAG,GAAG,IAAIP,IAAI,CAACE,KAAK,CAAC;IAC3BK,GAAG,CAACJ,OAAO,CAACI,GAAG,CAACH,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChC;IACA,IAAKG,GAAG,CAACC,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAMX,KAAK,EAAE;MAClCC,KAAK,CAACW,IAAI,CAAC;QACTH,IAAI;QACJJ,KAAK,EAAE,IAAIF,IAAI,CAACE,KAAK,CAAC;QACtBK,GAAG,EAAE,IAAIP,IAAI,CAACO,GAAG;MACnB,CAAC,CAAC;MACFD,IAAI,EAAE;IACR;IACA;IACA,IAAIC,GAAG,IAAIN,cAAc,EAAE;IAC3BC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EACpC;EACA,OAAON,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}