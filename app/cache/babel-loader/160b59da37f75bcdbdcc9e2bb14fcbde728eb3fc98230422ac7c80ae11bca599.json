{"ast":null,"code":"var _jsxFileName = \"/Users/hyungjuncho/Documents/SNU_BFA/KB_capstone/KB_PB_Agent_AI_JinShiWang/frontend/src/components/market_pipeline/MarketIndicesChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarketIndicesChart = ({\n  data,\n  loading,\n  error\n}) => {\n  _s();\n  var _currentValues;\n  const [selectedIndex, setSelectedIndex] = useState('dow');\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: '40px',\n        color: '#666',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '8px',\n        border: '1px solid #e9ecef'\n      },\n      children: \"\\uC8FC\\uC694 \\uC9C0\\uC218 \\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: '40px',\n        color: '#d32f2f',\n        backgroundColor: '#ffebee',\n        borderRadius: '8px',\n        border: '1px solid #ffcdd2'\n      },\n      children: [\"\\uC9C0\\uC218 \\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294\\uB370 \\uC2E4\\uD328\\uD588\\uC2B5\\uB2C8\\uB2E4: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n  if (!data || !data.dow && !data.sp500 && !data.nasdaq) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: '40px',\n        color: '#666',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '8px',\n        border: '1px solid #e9ecef'\n      },\n      children: \"\\uC8FC\\uC694 \\uC9C0\\uC218 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 지수 정보 매핑\n  const indexInfo = {\n    dow: {\n      name: 'DOW',\n      data: data.dow,\n      color: '#1f77b4',\n      key: 'dow'\n    },\n    sp500: {\n      name: 'S&P 500',\n      data: data.sp500,\n      color: '#ff7f0e',\n      key: 'sp500'\n    },\n    nasdaq: {\n      name: 'NASDAQ',\n      data: data.nasdaq,\n      color: '#2ca02c',\n      key: 'nasdaq'\n    }\n  };\n\n  // 사용 가능한 지수들만 필터링\n  const availableIndices = Object.keys(indexInfo).filter(key => {\n    const info = indexInfo[key];\n    return info.data && info.data.dates && info.data.closes;\n  });\n  if (availableIndices.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: '40px',\n        color: '#666',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '8px',\n        border: '1px solid #e9ecef'\n      },\n      children: \"\\uC720\\uD6A8\\uD55C \\uC9C0\\uC218 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 현재 선택된 지수가 사용 가능한지 확인하고, 없으면 첫 번째 사용 가능한 지수로 변경\n  const currentIndex = availableIndices.includes(selectedIndex) ? selectedIndex : availableIndices[0];\n  const currentIndexInfo = indexInfo[currentIndex];\n\n  // 차트 크기 설정\n  const width = 800;\n  const height = 300;\n  const padding = 50;\n\n  // 현재 지수의 최대/최소값 계산\n  const currentValues = currentIndexInfo.data.closes || [];\n  if (currentValues.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: '40px',\n        color: '#666'\n      },\n      children: \"\\uC120\\uD0DD\\uB41C \\uC9C0\\uC218\\uC758 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n  const maxValue = Math.max(...currentValues);\n  const minValue = Math.min(...currentValues);\n  const valueRange = maxValue - minValue || 1;\n\n  // 평균가격 계산\n  const avgValue = currentValues.reduce((sum, value) => sum + value, 0) / currentValues.length;\n\n  // 날짜 범위 계산\n  const dates = currentIndexInfo.data.dates;\n  const dateCount = dates.length;\n  const xStep = (width - 2 * padding) / (dateCount - 1 || 1);\n  const yScale = value => padding + (maxValue - value) / valueRange * (height - 2 * padding);\n\n  // 평균선 y좌표\n  const avgY = yScale(avgValue);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#ffffff',\n      borderRadius: '8px',\n      border: '1px solid #e0e0e0',\n      padding: '20px',\n      marginBottom: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px',\n        display: 'flex',\n        gap: '8px',\n        flexWrap: 'wrap'\n      },\n      children: Object.keys(indexInfo).map(key => {\n        const isAvailable = availableIndices.includes(key);\n        const isSelected = currentIndex === key;\n        // 모든 버튼 색상 EFC352\n        const mainColor = '#EFC352';\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedIndex(key),\n          disabled: !isAvailable,\n          style: {\n            padding: '8px 16px',\n            border: isSelected ? `2px solid ${mainColor}` : '1px solid #ddd',\n            borderRadius: '6px',\n            backgroundColor: isSelected ? `${mainColor}20` : isAvailable ? '#ffffff' : '#f5f5f5',\n            color: isSelected ? mainColor : isAvailable ? '#333' : '#999',\n            cursor: isAvailable ? 'pointer' : 'not-allowed',\n            fontWeight: isSelected ? 'bold' : 'normal',\n            fontSize: '14px',\n            transition: 'all 0.2s ease'\n          },\n          children: indexInfo[key].name\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflowX: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: width,\n        height: height,\n        style: {\n          minWidth: '800px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n            id: \"grid\",\n            width: \"50\",\n            height: \"50\",\n            patternUnits: \"userSpaceOnUse\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M 50 0 L 0 0 0 50\",\n              fill: \"none\",\n              stroke: \"#f0f0f0\",\n              strokeWidth: \"1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n          width: width,\n          height: height,\n          fill: \"url(#grid)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: padding,\n          y1: padding,\n          x2: padding,\n          y2: height - padding,\n          stroke: \"#ccc\",\n          strokeWidth: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: padding,\n          y1: height - padding,\n          x2: width - padding,\n          y2: height - padding,\n          stroke: \"#ccc\",\n          strokeWidth: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), [0, 0.25, 0.5, 0.75, 1].map(ratio => {\n          const value = maxValue - ratio * valueRange;\n          const y = padding + ratio * (height - 2 * padding);\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              x1: padding - 5,\n              y1: y,\n              x2: padding,\n              y2: y,\n              stroke: \"#ccc\",\n              strokeWidth: \"1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: padding - 10,\n              y: y + 4,\n              textAnchor: \"end\",\n              fontSize: \"11\",\n              fill: \"#666\",\n              children: value.toLocaleString(undefined, {\n                maximumFractionDigits: 0\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this)]\n          }, ratio, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this);\n        }), (() => {\n          // 평균선을 기준으로 위/아래 구간별로 색상을 다르게 표시\n          const segments = [];\n          for (let i = 0; i < currentValues.length - 1; i++) {\n            const x1 = padding + i * xStep;\n            const y1 = yScale(currentValues[i]);\n            const x2 = padding + (i + 1) * xStep;\n            const y2 = yScale(currentValues[i + 1]);\n            const above1 = currentValues[i] >= avgValue;\n            const above2 = currentValues[i + 1] >= avgValue;\n            if (above1 === above2) {\n              // 두 점이 모두 평균선 위 또는 아래에 있는 경우\n              segments.push({\n                x1,\n                y1,\n                x2,\n                y2,\n                color: above1 ? '#ef4444' : '#3b82f6' // 빨간색 : 파란색\n              });\n            } else {\n              // 평균선과 교차하는 경우\n              const t = (avgValue - currentValues[i]) / (currentValues[i + 1] - currentValues[i]);\n              const crossX = x1 + t * (x2 - x1);\n              const crossY = avgY;\n              segments.push({\n                x1,\n                y1,\n                x2: crossX,\n                y2: crossY,\n                color: above1 ? '#ef4444' : '#3b82f6'\n              });\n              segments.push({\n                x1: crossX,\n                y1: crossY,\n                x2,\n                y2,\n                color: above2 ? '#ef4444' : '#3b82f6'\n              });\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n              children: [/*#__PURE__*/_jsxDEV(\"linearGradient\", {\n                id: \"red-gradient\",\n                x1: \"0\",\n                y1: \"0\",\n                x2: \"0\",\n                y2: \"1\",\n                children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"0%\",\n                  stopColor: \"#ef4444\",\n                  stopOpacity: \"0.25\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"100%\",\n                  stopColor: \"#ef4444\",\n                  stopOpacity: \"0.05\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n                id: \"blue-gradient\",\n                x1: \"0\",\n                y1: \"1\",\n                x2: \"0\",\n                y2: \"0\",\n                children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"0%\",\n                  stopColor: \"#3b82f6\",\n                  stopOpacity: \"0.18\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"100%\",\n                  stopColor: \"#3b82f6\",\n                  stopOpacity: \"0.05\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: padding,\n              y1: avgY,\n              x2: width - padding,\n              y2: avgY,\n              stroke: \"#888\",\n              strokeDasharray: \"4 2\",\n              strokeWidth: \"1.5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), (() => {\n              // 평균선과 교차점 보간\n              const aboveAreas = [];\n              const belowAreas = [];\n              let currentArea = [];\n              let currentType = null; // 'above' or 'below'\n              function pushArea(type, area) {\n                if (area.length > 1) {\n                  (type === 'above' ? aboveAreas : belowAreas).push([...area]);\n                }\n              }\n              for (let i = 0; i < currentValues.length; i++) {\n                const x = padding + i * xStep;\n                const y = yScale(currentValues[i]);\n                const isAbove = currentValues[i] >= avgValue;\n                if (currentType === null) {\n                  currentType = isAbove ? 'above' : 'below';\n                  currentArea.push({\n                    x,\n                    y,\n                    origIdx: i\n                  });\n                } else if (isAbove && currentType === 'above' || !isAbove && currentType === 'below') {\n                  currentArea.push({\n                    x,\n                    y,\n                    origIdx: i\n                  });\n                } else {\n                  // 평균선과 교차: 보간점 추가\n                  const prevIdx = i - 1;\n                  const x1 = padding + prevIdx * xStep;\n                  const y1 = yScale(currentValues[prevIdx]);\n                  const x2 = x;\n                  const y2 = y;\n                  const v1 = currentValues[prevIdx];\n                  const v2 = currentValues[i];\n                  const t = (avgValue - v1) / (v2 - v1);\n                  const crossX = x1 + t * (x2 - x1);\n                  const crossY = avgY;\n                  currentArea.push({\n                    x: crossX,\n                    y: crossY,\n                    origIdx: null\n                  });\n                  pushArea(currentType, currentArea);\n                  // 새 영역 시작\n                  currentType = isAbove ? 'above' : 'below';\n                  currentArea = [{\n                    x: crossX,\n                    y: crossY,\n                    origIdx: null\n                  }, {\n                    x,\n                    y,\n                    origIdx: i\n                  }];\n                }\n              }\n              pushArea(currentType, currentArea);\n\n              // 각 영역을 polygon으로 만듦 (평균선까지 닫음)\n              const polygons = [];\n              aboveAreas.forEach(area => {\n                const points = [{\n                  x: area[0].x,\n                  y: avgY\n                }, ...area, {\n                  x: area[area.length - 1].x,\n                  y: avgY\n                }];\n                polygons.push(/*#__PURE__*/_jsxDEV(\"polygon\", {\n                  points: points.map(p => `${p.x},${p.y}`).join(' '),\n                  fill: \"url(#red-gradient)\",\n                  stroke: \"none\",\n                  style: {\n                    pointerEvents: 'none'\n                  }\n                }, \"above-\" + area[0].x, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 23\n                }, this));\n              });\n              belowAreas.forEach(area => {\n                const points = [{\n                  x: area[0].x,\n                  y: avgY\n                }, ...area, {\n                  x: area[area.length - 1].x,\n                  y: avgY\n                }];\n                polygons.push(/*#__PURE__*/_jsxDEV(\"polygon\", {\n                  points: points.map(p => `${p.x},${p.y}`).join(' '),\n                  fill: \"url(#blue-gradient)\",\n                  stroke: \"none\",\n                  style: {\n                    pointerEvents: 'none'\n                  }\n                }, \"below-\" + area[0].x, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 23\n                }, this));\n              });\n              return polygons;\n            })(), segments.map((seg, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: seg.x1,\n              y1: seg.y1,\n              x2: seg.x2,\n              y2: seg.y2,\n              stroke: seg.color,\n              strokeWidth: \"3\"\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: width - padding - 10,\n              y: padding - 30,\n              textAnchor: \"end\",\n              fontSize: \"13\",\n              fill: \"#666\",\n              fontWeight: \"medium\",\n              children: [dates[0], \" - \", dates[dates.length - 1]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this);\n        })(), dates.map((date, i) => {\n          if (i % Math.ceil(dateCount / 6) === 0) {\n            const x = padding + i * xStep;\n            return /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x,\n              y: height - padding + 20,\n              textAnchor: \"middle\",\n              fontSize: \"11\",\n              fill: \"#666\",\n              children: new Date(date).toLocaleDateString('ko-KR', {\n                month: 'short',\n                day: 'numeric'\n              })\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 17\n            }, this);\n          }\n          return null;\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '16px',\n        padding: '12px',\n        backgroundColor: 'rgba(229, 223, 209, 0.5)',\n        borderRadius: '6px',\n        fontSize: '14px',\n        color: '#555'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '8px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [currentIndexInfo.name, \" \\uC815\\uBCF4:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px',\n          flexWrap: 'wrap',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uCD5C\\uACE0\\uAC00:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 17\n          }, this), \" \", maxValue.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uCD5C\\uC800\\uAC00:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 17\n          }, this), \" \", minValue.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD3C9\\uADE0\\uAC00:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 17\n          }, this), \" \", avgValue.toFixed(0).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uCD5C\\uC2E0\\uAC00:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 17\n          }, this), \" \", (_currentValues = currentValues[currentValues.length - 1]) === null || _currentValues === void 0 ? void 0 : _currentValues.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(MarketIndicesChart, \"X+dB8UUVht1cqesjU7zHpEomD0Y=\");\n_c = MarketIndicesChart;\nexport default MarketIndicesChart;\nvar _c;\n$RefreshReg$(_c, \"MarketIndicesChart\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MarketIndicesChart","data","loading","error","_s","_currentValues","selectedIndex","setSelectedIndex","style","textAlign","padding","color","backgroundColor","borderRadius","border","children","fileName","_jsxFileName","lineNumber","columnNumber","dow","sp500","nasdaq","indexInfo","name","key","availableIndices","Object","keys","filter","info","dates","closes","length","currentIndex","includes","currentIndexInfo","width","height","currentValues","maxValue","Math","max","minValue","min","valueRange","avgValue","reduce","sum","value","dateCount","xStep","yScale","avgY","marginBottom","display","gap","flexWrap","map","isAvailable","isSelected","mainColor","onClick","disabled","cursor","fontWeight","fontSize","transition","overflowX","minWidth","id","patternUnits","d","fill","stroke","strokeWidth","x1","y1","x2","y2","ratio","y","x","textAnchor","toLocaleString","undefined","maximumFractionDigits","segments","i","above1","above2","push","t","crossX","crossY","offset","stopColor","stopOpacity","strokeDasharray","aboveAreas","belowAreas","currentArea","currentType","pushArea","type","area","isAbove","origIdx","prevIdx","v1","v2","polygons","forEach","points","p","join","pointerEvents","seg","date","ceil","Date","toLocaleDateString","month","day","marginTop","justifyContent","alignItems","toFixed","_c","$RefreshReg$"],"sources":["/Users/hyungjuncho/Documents/SNU_BFA/KB_capstone/KB_PB_Agent_AI_JinShiWang/frontend/src/components/market_pipeline/MarketIndicesChart.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst MarketIndicesChart = ({ data, loading, error }) => {\n  const [selectedIndex, setSelectedIndex] = useState('dow');\n\n  if (loading) {\n    return (\n      <div style={{ \n        textAlign: 'center', \n        padding: '40px', \n        color: '#666',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '8px',\n        border: '1px solid #e9ecef'\n      }}>\n        주요 지수 데이터를 불러오는 중...\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ \n        textAlign: 'center', \n        padding: '40px', \n        color: '#d32f2f',\n        backgroundColor: '#ffebee',\n        borderRadius: '8px',\n        border: '1px solid #ffcdd2'\n      }}>\n        지수 데이터를 불러오는데 실패했습니다: {error}\n      </div>\n    );\n  }\n\n  if (!data || (!data.dow && !data.sp500 && !data.nasdaq)) {\n    return (\n      <div style={{ \n        textAlign: 'center', \n        padding: '40px', \n        color: '#666',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '8px',\n        border: '1px solid #e9ecef'\n      }}>\n        주요 지수 데이터가 없습니다.\n      </div>\n    );\n  }\n\n  // 지수 정보 매핑\n  const indexInfo = {\n    dow: { name: 'DOW', data: data.dow, color: '#1f77b4', key: 'dow' },\n    sp500: { name: 'S&P 500', data: data.sp500, color: '#ff7f0e', key: 'sp500' },\n    nasdaq: { name: 'NASDAQ', data: data.nasdaq, color: '#2ca02c', key: 'nasdaq' }\n  };\n\n  // 사용 가능한 지수들만 필터링\n  const availableIndices = Object.keys(indexInfo).filter(key => {\n    const info = indexInfo[key];\n    return info.data && info.data.dates && info.data.closes;\n  });\n\n  if (availableIndices.length === 0) {\n    return (\n      <div style={{ \n        textAlign: 'center', \n        padding: '40px', \n        color: '#666',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '8px',\n        border: '1px solid #e9ecef'\n      }}>\n        유효한 지수 데이터가 없습니다.\n      </div>\n    );\n  }\n\n  // 현재 선택된 지수가 사용 가능한지 확인하고, 없으면 첫 번째 사용 가능한 지수로 변경\n  const currentIndex = availableIndices.includes(selectedIndex) ? selectedIndex : availableIndices[0];\n  const currentIndexInfo = indexInfo[currentIndex];\n\n  // 차트 크기 설정\n  const width = 800;\n  const height = 300;\n  const padding = 50;\n\n  // 현재 지수의 최대/최소값 계산\n  const currentValues = currentIndexInfo.data.closes || [];\n  \n  if (currentValues.length === 0) {\n    return (\n      <div style={{ \n        textAlign: 'center', \n        padding: '40px', \n        color: '#666'\n      }}>\n        선택된 지수의 데이터가 없습니다.\n      </div>\n    );\n  }\n\n  const maxValue = Math.max(...currentValues);\n  const minValue = Math.min(...currentValues);\n  const valueRange = maxValue - minValue || 1;\n  \n  // 평균가격 계산\n  const avgValue = currentValues.reduce((sum, value) => sum + value, 0) / currentValues.length;\n\n  // 날짜 범위 계산\n  const dates = currentIndexInfo.data.dates;\n  const dateCount = dates.length;\n\n  const xStep = (width - 2 * padding) / (dateCount - 1 || 1);\n  const yScale = (value) => padding + ((maxValue - value) / valueRange) * (height - 2 * padding);\n  \n  // 평균선 y좌표\n  const avgY = yScale(avgValue);\n\n  return (\n    <div style={{ \n      backgroundColor: '#ffffff',\n      borderRadius: '8px',\n      border: '1px solid #e0e0e0',\n      padding: '20px',\n\n      marginBottom: '8px'\n    }}>\n      \n      {/* 지수 선택 버튼들 */}\n      <div style={{ \n        marginBottom: '20px',\n        display: 'flex',\n        gap: '8px',\n        flexWrap: 'wrap'\n      }}>\n        {Object.keys(indexInfo).map((key) => {\n          const isAvailable = availableIndices.includes(key);\n          const isSelected = currentIndex === key;\n          // 모든 버튼 색상 EFC352\n          const mainColor = '#EFC352';\n          return (\n            <button\n              key={key}\n              onClick={() => setSelectedIndex(key)}\n              disabled={!isAvailable}\n              style={{\n                padding: '8px 16px',\n                border: isSelected ? `2px solid ${mainColor}` : '1px solid #ddd',\n                borderRadius: '6px',\n                backgroundColor: isSelected ? `${mainColor}20` : (isAvailable ? '#ffffff' : '#f5f5f5'),\n                color: isSelected ? mainColor : (isAvailable ? '#333' : '#999'),\n                cursor: isAvailable ? 'pointer' : 'not-allowed',\n                fontWeight: isSelected ? 'bold' : 'normal',\n                fontSize: '14px',\n                transition: 'all 0.2s ease'\n              }}\n            >\n              {indexInfo[key].name}\n            </button>\n          );\n        })}\n      </div>\n      \n      <div style={{ overflowX: 'auto' }}>\n        <svg width={width} height={height} style={{ minWidth: '800px' }}>\n          {/* 배경 격자 */}\n          <defs>\n            <pattern id=\"grid\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\">\n              <path d=\"M 50 0 L 0 0 0 50\" fill=\"none\" stroke=\"#f0f0f0\" strokeWidth=\"1\"/>\n            </pattern>\n          </defs>\n          <rect width={width} height={height} fill=\"url(#grid)\" />\n          \n          {/* Y축 */}\n          <line x1={padding} y1={padding} x2={padding} y2={height - padding} stroke=\"#ccc\" strokeWidth=\"1\" />\n          \n          {/* X축 */}\n          <line x1={padding} y1={height - padding} x2={width - padding} y2={height - padding} stroke=\"#ccc\" strokeWidth=\"1\" />\n          \n          {/* Y축 눈금 및 레이블 (내림차순) */}\n          {[0, 0.25, 0.5, 0.75, 1].map((ratio) => {\n            const value = maxValue - ratio * valueRange;\n            const y = padding + ratio * (height - 2 * padding);\n            return (\n              <g key={ratio}>\n                <line x1={padding - 5} y1={y} x2={padding} y2={y} stroke=\"#ccc\" strokeWidth=\"1\" />\n                <text x={padding - 10} y={y + 4} textAnchor=\"end\" fontSize=\"11\" fill=\"#666\">\n                  {value.toLocaleString(undefined, { maximumFractionDigits: 0 })}\n                </text>\n              </g>\n            );\n          })}\n          \n          {/* 선택된 지수의 라인 그리기 */}\n          {(() => {\n            // 평균선을 기준으로 위/아래 구간별로 색상을 다르게 표시\n            const segments = [];\n            for (let i = 0; i < currentValues.length - 1; i++) {\n              const x1 = padding + i * xStep;\n              const y1 = yScale(currentValues[i]);\n              const x2 = padding + (i + 1) * xStep;\n              const y2 = yScale(currentValues[i + 1]);\n              \n              const above1 = currentValues[i] >= avgValue;\n              const above2 = currentValues[i + 1] >= avgValue;\n              \n              if (above1 === above2) {\n                // 두 점이 모두 평균선 위 또는 아래에 있는 경우\n                segments.push({ \n                  x1, y1, x2, y2, \n                  color: above1 ? '#ef4444' : '#3b82f6' // 빨간색 : 파란색\n                });\n              } else {\n                // 평균선과 교차하는 경우\n                const t = (avgValue - currentValues[i]) / (currentValues[i + 1] - currentValues[i]);\n                const crossX = x1 + t * (x2 - x1);\n                const crossY = avgY;\n                \n                segments.push({ \n                  x1, y1, \n                  x2: crossX, y2: crossY, \n                  color: above1 ? '#ef4444' : '#3b82f6'\n                });\n                segments.push({ \n                  x1: crossX, y1: crossY, \n                  x2, y2, \n                  color: above2 ? '#ef4444' : '#3b82f6'\n                });\n              }\n            }\n\n            return (\n              <g>\n                {/* 그라데이션 정의 */}\n                <defs>\n                  <linearGradient id=\"red-gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"0%\" stopColor=\"#ef4444\" stopOpacity=\"0.25\" />\n                    <stop offset=\"100%\" stopColor=\"#ef4444\" stopOpacity=\"0.05\" />\n                  </linearGradient>\n                  {/* blue-gradient: graph 선에서 진하고, average에서 연하게 반전 */}\n                  <linearGradient id=\"blue-gradient\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0\">\n                    <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.18\" />\n                    <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                  </linearGradient>\n                </defs>\n\n                {/* 평균선 */}\n                <line \n                  x1={padding} \n                  y1={avgY} \n                  x2={width - padding} \n                  y2={avgY} \n                  stroke=\"#888\" \n                  strokeDasharray=\"4 2\" \n                  strokeWidth=\"1.5\" \n                />\n\n                {/* 영역 채우기 (matplotlib fill_between 스타일) */}\n                {(() => {\n                  // 평균선과 교차점 보간\n                  const aboveAreas = [];\n                  const belowAreas = [];\n                  let currentArea = [];\n                  let currentType = null; // 'above' or 'below'\n                  function pushArea(type, area) {\n                    if (area.length > 1) {\n                      (type === 'above' ? aboveAreas : belowAreas).push([...area]);\n                    }\n                  }\n                  for (let i = 0; i < currentValues.length; i++) {\n                    const x = padding + i * xStep;\n                    const y = yScale(currentValues[i]);\n                    const isAbove = currentValues[i] >= avgValue;\n                    if (currentType === null) {\n                      currentType = isAbove ? 'above' : 'below';\n                      currentArea.push({ x, y, origIdx: i });\n                    } else if ((isAbove && currentType === 'above') || (!isAbove && currentType === 'below')) {\n                      currentArea.push({ x, y, origIdx: i });\n                    } else {\n                      // 평균선과 교차: 보간점 추가\n                      const prevIdx = i - 1;\n                      const x1 = padding + prevIdx * xStep;\n                      const y1 = yScale(currentValues[prevIdx]);\n                      const x2 = x;\n                      const y2 = y;\n                      const v1 = currentValues[prevIdx];\n                      const v2 = currentValues[i];\n                      const t = (avgValue - v1) / (v2 - v1);\n                      const crossX = x1 + t * (x2 - x1);\n                      const crossY = avgY;\n                      currentArea.push({ x: crossX, y: crossY, origIdx: null });\n                      pushArea(currentType, currentArea);\n                      // 새 영역 시작\n                      currentType = isAbove ? 'above' : 'below';\n                      currentArea = [{ x: crossX, y: crossY, origIdx: null }, { x, y, origIdx: i }];\n                    }\n                  }\n                  pushArea(currentType, currentArea);\n\n                  // 각 영역을 polygon으로 만듦 (평균선까지 닫음)\n                  const polygons = [];\n                  aboveAreas.forEach(area => {\n                    const points = [\n                      { x: area[0].x, y: avgY },\n                      ...area,\n                      { x: area[area.length - 1].x, y: avgY }\n                    ];\n                    polygons.push(\n                      <polygon\n                        key={\"above-\" + area[0].x}\n                        points={points.map(p => `${p.x},${p.y}`).join(' ')}\n                        fill=\"url(#red-gradient)\"\n                        stroke=\"none\"\n                        style={{ pointerEvents: 'none' }}\n                      />\n                    );\n                  });\n                  belowAreas.forEach(area => {\n                    const points = [\n                      { x: area[0].x, y: avgY },\n                      ...area,\n                      { x: area[area.length - 1].x, y: avgY }\n                    ];\n                    polygons.push(\n                      <polygon\n                        key={\"below-\" + area[0].x}\n                        points={points.map(p => `${p.x},${p.y}`).join(' ')}\n                        fill=\"url(#blue-gradient)\"\n                        stroke=\"none\"\n                        style={{ pointerEvents: 'none' }}\n                      />\n                    );\n                  });\n                  return polygons;\n                })()}\n\n                {/* 구간별 색상으로 라인 그리기 */}\n                {segments.map((seg, i) => (\n                  <line\n                    key={i}\n                    x1={seg.x1}\n                    y1={seg.y1}\n                    x2={seg.x2}\n                    y2={seg.y2}\n                    stroke={seg.color}\n                    strokeWidth=\"3\"\n                  />\n                ))}\n                \n                {/* 기간 정보를 우상단에 표시 */}\n                <text\n                  x={width - padding - 10}\n                  y={padding - 30}\n                  textAnchor=\"end\"\n                  fontSize=\"13\"\n                  fill=\"#666\"\n                  fontWeight=\"medium\"\n                >\n                  {dates[0]} - {dates[dates.length - 1]}\n                </text>\n              </g>\n            );\n          })()}\n          \n          {/* X축 날짜 레이블 (일부만) */}\n          {dates.map((date, i) => {\n            if (i % Math.ceil(dateCount / 6) === 0) {\n              const x = padding + i * xStep;\n              return (\n                <text\n                  key={i}\n                  x={x}\n                  y={height - padding + 20}\n                  textAnchor=\"middle\"\n                  fontSize=\"11\"\n                  fill=\"#666\"\n                >\n                  {new Date(date).toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' })}\n                </text>\n              );\n            }\n            return null;\n          })}\n        </svg>\n      </div>\n      \n      {/* 간단한 요약 */}\n      <div style={{ \n        marginTop: '16px',\n        padding: '12px',\n        backgroundColor: 'rgba(229, 223, 209, 0.5)',\n        borderRadius: '6px',\n        fontSize: '14px',\n        color: '#555'\n      }}>\n        <div style={{ marginBottom: '8px' }}>\n          <strong>{currentIndexInfo.name} 정보:</strong>\n        </div>\n        <div style={{ display: 'flex', gap: '20px', flexWrap: 'wrap', justifyContent: 'center', alignItems: 'center' }}>\n          <span><strong>최고가:</strong> {maxValue.toLocaleString()}</span>\n          <span><strong>최저가:</strong> {minValue.toLocaleString()}</span>\n          <span><strong>평균가:</strong> {avgValue.toFixed(0).toLocaleString()}</span>\n          <span><strong>최신가:</strong> {currentValues[currentValues.length - 1]?.toLocaleString()}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MarketIndicesChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}