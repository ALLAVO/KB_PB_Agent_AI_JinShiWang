{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\nexport const fetchAllClients = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/clients`);\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Clients API error:', error);\n    throw error;\n  }\n};\nexport const fetchClientDetail = async clientId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/clients/${clientId}`);\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Client detail API error:', error);\n    throw error;\n  }\n};\nexport const fetchClientPortfolio = async clientId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/clients/${clientId}/portfolio`);\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Client portfolio API error:', error);\n    throw error;\n  }\n};\nexport const fetchClientSummary = async (clientId, periodEndDate = null) => {\n  try {\n    let url = `${API_BASE_URL}/clients/${clientId}/summary`;\n    if (periodEndDate) {\n      url += `?period_end_date=${periodEndDate}`;\n    }\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching client summary:', error);\n    throw error;\n  }\n};\nexport const fetchClientPerformance = async (clientId, periodEndDate) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/clients/${clientId}/performance/${periodEndDate}`);\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Client performance API error:', error);\n    throw error;\n  }\n};\nexport const fetchClientPortfolioChart = async clientId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/clients/${clientId}/portfolio-chart`);\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Client portfolio chart API error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchAllClients","response","fetch","ok","Error","status","json","error","console","fetchClientDetail","clientId","fetchClientPortfolio","fetchClientSummary","periodEndDate","url","fetchClientPerformance","fetchClientPortfolioChart"],"sources":["/Users/hyungjuncho/Documents/SNU_BFA/KB_capstone/KB_PB_Agent_AI_JinShiWang/frontend/src/api/clients.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\nexport const fetchAllClients = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/clients`);\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Clients API error:', error);\n    throw error;\n  }\n};\n\nexport const fetchClientDetail = async (clientId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/clients/${clientId}`);\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Client detail API error:', error);\n    throw error;\n  }\n};\n\nexport const fetchClientPortfolio = async (clientId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/clients/${clientId}/portfolio`);\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Client portfolio API error:', error);\n    throw error;\n  }\n};\n\nexport const fetchClientSummary = async (clientId, periodEndDate = null) => {\n  try {\n    let url = `${API_BASE_URL}/clients/${clientId}/summary`;\n    if (periodEndDate) {\n      url += `?period_end_date=${periodEndDate}`;\n    }\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching client summary:', error);\n    throw error;\n  }\n};\n\nexport const fetchClientPerformance = async (clientId, periodEndDate) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/clients/${clientId}/performance/${periodEndDate}`);\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Client performance API error:', error);\n    throw error;\n  }\n};\n\nexport const fetchClientPortfolioChart = async (clientId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/clients/${clientId}/portfolio-chart`);\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Client portfolio chart API error:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}